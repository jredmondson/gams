eval '(exit $?0)' && eval 'exec perl -w -S $0 ${1+"$@"}'
    & eval 'exec perl -w -S $0 $argv:q'
    if 0;

###################################################
# @author   James Edmondson <jedmondson@gmail.com>
#
# This perl script is useful for generating a dynamic
# version number for inclusion with C++.
###################################################

use File::Basename;

my $path = dirname(__FILE__);
$path .= "/..";

my $txt_fname = "$path/VERSION.txt";
my $h_fname = "$path/src/gams/utility/Version.h";
my $txt_mdate = (stat $txt_fname)[9];
my $h_mdate = (stat $h_fname)[9];

print "$ENV{'GAMS_ROOT'}\n"; 

if ($txt_mdate < $h_mdate) {
  exit 0;
}

print "Generating: reading from $txt_fname\n";

open VERSION_FILE, "<", $txt_fname  or
    die "Unable to open $txt_fname for reading.";
  $version = <VERSION_FILE>;
close VERSION_FILE;

chomp ($version);

$git_sha = `git rev-parse HEAD`;
chomp ($git_sha);

print "Generating: generating $h_fname\n";

open OUTPUT_FILE, ">",  $h_fname or
    die "Unable to open Version.h for writing.";
  print OUTPUT_FILE  "#pragma once\n\n";
  print OUTPUT_FILE  "/**\n";
  print OUTPUT_FILE  " * This file is generated by bin/generate_version_include.pl\n";
  print OUTPUT_FILE  " **/\n\n";
  print OUTPUT_FILE  "#include<string>\n\n";
  print OUTPUT_FILE  "namespace gams\n{\n";
  print OUTPUT_FILE  "  namespace utility\n  {\n";
  print OUTPUT_FILE  "    std::string get_version(void)\n";
  print OUTPUT_FILE  "    {\n";
  print OUTPUT_FILE  "      return std::string(\"" . $version . " (" . $git_sha . ")\")\n";
  print OUTPUT_FILE  "         + std::string(\" compiled on \") + __DATE__ + \" at \" + __TIME__;\n";
  print OUTPUT_FILE  "    }\n";
  print OUTPUT_FILE  "  } // end namespace utility\n";
  print OUTPUT_FILE  "} // end namespace gams\n";
close OUTPUT_FILE;

