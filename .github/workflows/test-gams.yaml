name: Gams CI

on:
  push:
  #  branches: [ "master" ]
  pull_request:
    types: [opened, reopened, review_requested]

jobs:

  Linux:
    
    runs-on: ubuntu-${{ matrix.os-version }}
    strategy:
      fail-fast: false
      matrix:
        #build_type: [Release]
        include:
          - job-name: 'Linux 20.04 g++'
            os: ubuntu-22.04
            os-version: '20.04'
            c_compiler: gcc
            cpp_compiler: g++
            build_type: [Release]
          - job-name: 'Linux 22.04 g++'
            os-version: '22.04'
            c_compiler: gcc
            cpp_compiler: g++
            build_type: [Release]
          - job-name: 'Linux 20.04 clang'
            os: ubuntu-20.04
            os-version: '20.04'
            c_compiler: clang
            cpp_compiler: clang++
            build_type: [Release]
          - job-name: 'Linux 22.04 clang'
            os: ubuntu-22.04
            os-version: '22.04'
            c_compiler: clang
            cpp_compiler: clang++
            build_type: [Release]


    name: ${{ matrix.job-name }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Boost, SSL, and Eigen3
        run: sudo apt-get install -y libboost-all-dev git libeigen3-dev

      
      - name: Download MADARA
        run: git clone https://github.com/jredmondson/madara.git

      - name: Install MADARA
        run: madara/scripts/cmake.sh ${{ matrix.c_compiler }}

    
      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -Dgams_TESTS=ON
          -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} -j $(nproc)

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }} --output-on-failure -j $(nproc)


  macOS:
    
    runs-on: macos-${{ matrix.os-version }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - job-name: 'Mac 12'
            os: macos-12
            os-version: '12'
            c_compiler: clang
            cpp_compiler: clang++
            build_type: [Release]
          # Disabling Mac 11 as the runner seems especially slow
          # - job-name: 'Mac 11'
          #   os: macos-11
          #   os-version: '11'
          #   c_compiler: clang
          #   cpp_compiler: clang++
          #   build_type: [Release]


    name: ${{ matrix.job-name }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Boost, SSL, and Eigen3
        run: brew install boost automake eigen
    
      - name: Download MADARA
        run: git clone https://github.com/jredmondson/madara.git

      - name: Install MADARA
        run: madara/scripts/cmake.sh mac

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -Dgams_TESTS=ON
          -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} -j $(sysctl -n hw.ncpu)

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }} --output-on-failure -j $(sysctl -n hw.ncpu)
