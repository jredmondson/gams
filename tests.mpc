project (test_mape_loop) : using_gams, using_madara {
  exeout = $(GAMS_ROOT)/bin
  exename = test_mape_loop
  
  macros +=  _USE_MATH_DEFINES

  requires += tests

  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/test_mape_loop.cpp
  }
}

project (gams_throughput) : using_gams, using_madara {
  exeout = $(GAMS_ROOT)/bin
  exename = gams_throughput
  
  macros +=  _USE_MATH_DEFINES

  requires += tests

  Documentation_Files {
  }


  Header_Files {
    tests/throughput/utility
    tests/throughput/algorithms
    tests/throughput/filters
    tests/throughput/gams_throughput.cpp
  }

  Source_Files {
    tests/throughput/utility
    tests/throughput/algorithms
    tests/throughput/filters
    tests/throughput/gams_throughput.cpp
  }
}


project (test_controller) : using_gams, using_madara {
  exeout = $(GAMS_ROOT)/bin
  exename = test_controller
  
  macros +=  _USE_MATH_DEFINES

  requires += tests

  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/test_controller.cpp
  }
}

project (test_controller_run) : using_gams, using_madara {
  exeout = $(GAMS_ROOT)/bin
  exename = test_controller_run
  
  macros +=  _USE_MATH_DEFINES

  requires += tests

  Documentation_Files {
  }

  Header_Files {
    tests/helper
  }

  Source_Files {
    tests/helper
    tests/test_controller_run.cpp
  }
}

project (test_utility) : using_gams, using_madara {
  exeout = $(GAMS_ROOT)/bin
  exename = test_utility

  macros +=  _USE_MATH_DEFINES

  requires += tests

  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/test_utility.cpp
  }
}

project (test_auctions) : using_gams, using_madara {
  exeout = $(GAMS_ROOT)/bin
  exename = test_auctions

  macros +=  _USE_MATH_DEFINES

  requires += tests

  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/test_auctions.cpp
  }
}

project (test_elections) : using_gams, using_madara {
  exeout = $(GAMS_ROOT)/bin
  exename = test_elections

  macros +=  _USE_MATH_DEFINES

  requires += tests

  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/test_elections.cpp
  }
}

project (test_variables) : using_gams, using_madara {
  exeout = $(GAMS_ROOT)/bin
  exename = test_variables

  macros +=  _USE_MATH_DEFINES

  requires += tests

  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/test_variables.cpp
  }
}

project (test_madara_reader) : using_madara {
  exeout = $(GAMS_ROOT)/bin
  exename = test_madara_reader

  requires += tests

  Source_Files {
    tests/message_performance/madara/ContinuousMadaraReader.cpp
  }
}

project (test_madara_writer) : using_madara {
  exeout = $(GAMS_ROOT)/bin
  exename = test_madara_writer

  requires += tests

  Source_Files {
    tests/message_performance/madara/ContinuousMadaraWriter.cpp
  }
}

project (test_coordinates) : using_gams, using_madara {
  exeout = $(GAMS_ROOT)/bin
  exename = test_coordinates

  macros +=  _USE_MATH_DEFINES

  requires += tests

  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/test_coordinates.cpp
  }
}

project (test_location) : using_gams, using_madara {
  exeout = $(GAMS_ROOT)/bin
  exename = test_location

  macros +=  _USE_MATH_DEFINES

  requires += tests

  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/test_location.cpp
  }
}

project (test_euler) : using_gams, using_madara {
  exeout = $(GAMS_ROOT)/bin
  exename = test_euler

  macros +=  _USE_MATH_DEFINES

  requires += tests

  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/test_euler.cpp
  }
}

project (test_utm) : using_gams, using_madara, using_utm {
  exeout = $(GAMS_ROOT)/bin
  exename = test_utm

  macros +=  _USE_MATH_DEFINES

  requires += tests

  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/test_utm.cpp
  }
}

project (test_arguments_parser) : using_gams, using_madara {
  exeout = $(GAMS_ROOT)/bin
  exename = test_arguments_parser

  macros +=  _USE_MATH_DEFINES

  requires += tests

  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/test_arguments_parser.cpp
  }
}

project (test_formation_sync) : using_gams, using_madara {
  exeout = $(GAMS_ROOT)/bin
  exename = test_formation_sync

  macros +=  _USE_MATH_DEFINES

  requires += tests

  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/test_formation_sync.cpp
  }
}

project (test_groups) : using_gams, using_madara {
  exeout = $(GAMS_ROOT)/bin
  exename = test_groups

  macros +=  _USE_MATH_DEFINES

  requires += tests

  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/test_groups.cpp
  }
}

project (test_ros2gams) : using_madara, using_ros, using_gams {
  exeout = $(GAMS_ROOT)/bin
  exename = test_ros2gams
  libpaths += $(ROS_ROOT)/../../lib

  requires += ros

  macros +=  _USE_MATH_DEFINES

  libs += roscpp
  libs += cpp_common
  libs += roscpp_serialization
  libs += rostime
  libs += rosbag
  libs += rosbag_storage

  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/test_ros2gams.cpp
  }
}

project (test_rosbridge) : using_madara, using_ros, using_gams {
  exeout = $(GAMS_ROOT)/bin
  exename = test_rosbridge
  libpaths += $(ROS_ROOT)/../../lib

  requires += ros

  macros +=  _USE_MATH_DEFINES

  libs += roscpp
  libs += cpp_common
  libs += roscpp_serialization
  libs += rostime
  libs += rosbag
  libs += rosbag_storage

  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/transports/ros/test_ros_bridge.cpp
  }
}

project (test_types) : using_madara, using_gams, using_types {
  requires += types

  exeout = $(GAMS_ROOT)/bin
  exename = test_types

  libs += TYPES MADARA

  macros +=  _USE_MATH_DEFINES

  Documentation_Files {
  }

  Header_Files {
  }

  Source_Files {
    tests/test_types.cpp
  }
}



